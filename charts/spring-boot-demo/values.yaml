# Default values for spring-boot-demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/trevorbox/spring-boot-ubi9-openjdk-21
  # repository: quay.io/trevorbox/spring-boot-micro-jdk-headless
  # repository: quay.io/trevorbox/spring-boot-micro-jre
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: 
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/actuator/prometheus"
  sidecar.istio.io/inject: "true"

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   memory: 1Gi
  #   cpu: 500m
  # requests:
  #   cpu: 500m
  #   memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


istio:
  enabled: false

ingressgateway:
  name: ingressgateway
  namespace: istio-ingress
context: 
  name: spring-boot-demo
  namespace: spring-boot-demo

cryostat:
  agent:
    enabled: false
    args:
      - '-javaagent:cryostat-agent-shaded.jar'
    env:
      # - name: CRYOSTAT_AGENT_WEBCLIENT_TLS_TRUST_ALL
      #   value: "true"
      - name: CRYOSTAT_AGENT_WEBCLIENT_TLS_REQUIRED
        value: "false"
      # - name: CRYOSTAT_AGENT_WEBCLIENT_TLS_VERIFY_HOSTNAME
      #   value: "false"
      - name: CRYOSTAT_AGENT_APP_NAME
        # Replace this with any value you like to use to identify your application.
        value: "spring-boot-demo"
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: CRYOSTAT_AGENT_BASEURI
        # Update this to correspond to the name of your Cryostat instance
        # if it is not 'cryostat'. This assumes that the target application
        # and the Cryostat instance are in the same Namespace, but you may
        # choose to configure the Agent to communicate with a Cryostat in
        # a different Namespace, too.
        # (https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/)
        value: http://cryostat.cryostat.svc.cluster.local:4180
      - name: CRYOSTAT_AGENT_API_WRITES_ENABLED
        # Set this to 'true' to turn on the "write" or "mutation" capabilities of the
        # Agent's HTTP API. This defaults to 'false', so the Agent HTTP API only exposes
        # readonly access to certain low-sensitivity calls. If this is 'true' then the
        # Agent will allow Cryostat to dynamically request JFR recordings to be started,
        # stopped, deleted, etc. as well as listed and retrieved.
        value: 'true'
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: CRYOSTAT_AGENT_CALLBACK
        # This infers the Agent Callback directly from the Pod's IP address using the
        # Kubernetes Downward API. Use this value directly as provided. The port number
        # 9977 can be changed but must match the containerPort below.
        value: "http://$(POD_IP):9977"
        # Replace "abcd1234" with an authentication token. For example, on OpenShift,
        # do 'oc whoami --show-token' in your terminal to retrieve your user account's token.
        # You may use this as the token that the Agent will pass to authorize itself
        # with the Cryostat server.
      # CRYOSTAT_AGENT_AUTHORIZATION IS NOT NEEDED - just update the Cryostat CR spec.authorizationOptions.openShiftSSO.accessReview and add a RoleBinding to match to allow the serviceaccount in the cryostat-agent pod 
  jmx:
    enabled: false
    # jmx args with mTLS enabled in service mesh options that work, notice the rmi.port is also 9091
    # https://stackoverflow.com/questions/20884353/why-java-opens-3-ports-when-jmx-is-configured
    args:
      - '-Dcom.sun.management.jmxremote.port=9091'
      - '-Dcom.sun.management.jmxremote.rmi.port=9091'
      - '-Dcom.sun.management.jmxremote.ssl=false'
      - '-Dcom.sun.management.jmxremote.authenticate=false'
